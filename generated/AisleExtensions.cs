// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Result
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Aisle.
    /// </summary>
    public static partial class AisleExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            public static CheckAisleModelResult CheckAisleExist(this IAisle operations, CheckAisleModel message = default(CheckAisleModel))
            {
                return operations.CheckAisleExistAsync(message).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CheckAisleModelResult> CheckAisleExistAsync(this IAisle operations, CheckAisleModel message = default(CheckAisleModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckAisleExistWithHttpMessagesAsync(message, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static CreateAisleModelResult CreateAisle(this IAisle operations, CreateAisleModel model = default(CreateAisleModel))
            {
                return operations.CreateAisleAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreateAisleModelResult> CreateAisleAsync(this IAisle operations, CreateAisleModel model = default(CreateAisleModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAisleWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static SearchAisleModelResult SearchAisle(this IAisle operations, SearchAisleModel model = default(SearchAisleModel))
            {
                return operations.SearchAisleAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SearchAisleModelResult> SearchAisleAsync(this IAisle operations, SearchAisleModel model = default(SearchAisleModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SearchAisleWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            public static GetAisleModelResult GetAisle(this IAisle operations, GetAisleModel message = default(GetAisleModel))
            {
                return operations.GetAisleAsync(message).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetAisleModelResult> GetAisleAsync(this IAisle operations, GetAisleModel message = default(GetAisleModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAisleWithHttpMessagesAsync(message, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static UpdateAisleModelResult UpdateAisle(this IAisle operations, UpdateAisleModel model = default(UpdateAisleModel))
            {
                return operations.UpdateAisleAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpdateAisleModelResult> UpdateAisleAsync(this IAisle operations, UpdateAisleModel model = default(UpdateAisleModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateAisleWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
